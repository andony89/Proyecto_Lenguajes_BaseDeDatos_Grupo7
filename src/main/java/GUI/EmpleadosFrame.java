/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import BD.ConexionOracle;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import oracle.jdbc.OracleTypes;
import oracle.jdbc.OracleCallableStatement;
import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.RowSorter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author andon
 */
public class EmpleadosFrame extends javax.swing.JFrame {

    /**
     * Creates new form EmpleadosFrame
     */
    private DefaultTableModel modeloTabla;

    public EmpleadosFrame() {
        initComponents();
        // Configurar el comportamiento de cierre para que solo cierre esta ventana
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        modeloTabla = (DefaultTableModel) TableEmpleados.getModel();
        actualizarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField6 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableEmpleados = new javax.swing.JTable();
        btnBuscar = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        txfNombre = new javax.swing.JTextField();
        txfEmpleadoID = new javax.swing.JTextField();
        txfTelefono = new javax.swing.JTextField();
        txfEmail = new javax.swing.JTextField();
        txfPosicion = new javax.swing.JTextField();
        txfSalario = new javax.swing.JTextField();
        Nombre = new javax.swing.JLabel();
        EmpleadoID = new javax.swing.JLabel();
        Telefono = new javax.swing.JLabel();
        Email = new javax.swing.JLabel();
        Posicion = new javax.swing.JLabel();
        FContratacion = new javax.swing.JLabel();
        Salario = new javax.swing.JLabel();
        txfFechaC = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnObtenerEmpleados = new javax.swing.JButton();
        btnObtenerEmpleadosPorPosicion = new javax.swing.JButton();
        btnObtenerEmpleadosPorSalario = new javax.swing.JButton();

        jTextField6.setText("jTextField6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));

        TableEmpleados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "EmpleadoID", "Nombre", "Telefono", "Email", "Posicion", "F.Contratacion", "Salario"
            }
        ));
        jScrollPane1.setViewportView(TableEmpleados);
        if (TableEmpleados.getColumnModel().getColumnCount() > 0) {
            TableEmpleados.getColumnModel().getColumn(0).setHeaderValue("EmpleadoID");
            TableEmpleados.getColumnModel().getColumn(1).setHeaderValue("Nombre");
            TableEmpleados.getColumnModel().getColumn(2).setHeaderValue("Telefono");
            TableEmpleados.getColumnModel().getColumn(3).setHeaderValue("Email");
            TableEmpleados.getColumnModel().getColumn(4).setHeaderValue("Posicion");
            TableEmpleados.getColumnModel().getColumn(5).setHeaderValue("F.Contratacion");
            TableEmpleados.getColumnModel().getColumn(6).setHeaderValue("Salario");
        }

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        txfNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfNombreActionPerformed(evt);
            }
        });

        txfEmpleadoID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfEmpleadoIDActionPerformed(evt);
            }
        });

        txfTelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfTelefonoActionPerformed(evt);
            }
        });

        txfEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfEmailActionPerformed(evt);
            }
        });

        txfPosicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfPosicionActionPerformed(evt);
            }
        });

        txfSalario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfSalarioActionPerformed(evt);
            }
        });

        Nombre.setText("Nombre");

        EmpleadoID.setText("EmpleadoID");

        Telefono.setText("Telefono");

        Email.setText("Email");

        Posicion.setText("Posicion");

        FContratacion.setText("F.Contratacion");

        Salario.setText("Salario");

        txfFechaC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfFechaCActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 153, 102));

        jLabel1.setText("Cursor");

        btnObtenerEmpleados.setText("ObtenerEmpleados");
        btnObtenerEmpleados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObtenerEmpleadosActionPerformed(evt);
            }
        });

        btnObtenerEmpleadosPorPosicion.setText("ObtenerEmpleadosPorPosicion");
        btnObtenerEmpleadosPorPosicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObtenerEmpleadosPorPosicionActionPerformed(evt);
            }
        });

        btnObtenerEmpleadosPorSalario.setText("ObtenerEmpleadosPorSalario");
        btnObtenerEmpleadosPorSalario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObtenerEmpleadosPorSalarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(btnObtenerEmpleados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnObtenerEmpleadosPorPosicion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnObtenerEmpleadosPorSalario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnObtenerEmpleados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnObtenerEmpleadosPorPosicion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnObtenerEmpleadosPorSalario)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(EmpleadoID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txfEmpleadoID, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnBuscar)
                        .addGap(18, 18, 18)
                        .addComponent(btnAgregar)
                        .addGap(18, 18, 18)
                        .addComponent(btnEditar)
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1057, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Email, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(txfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(Telefono, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txfTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(FContratacion)
                        .addGap(18, 18, 18)
                        .addComponent(txfFechaC, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Salario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txfSalario, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(Posicion)
                        .addGap(26, 26, 26)
                        .addComponent(txfPosicion, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Nombre)
                            .addComponent(txfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EmpleadoID)
                            .addComponent(txfEmpleadoID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Email)
                            .addComponent(txfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Telefono)
                            .addComponent(txfTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Salario)
                            .addComponent(txfSalario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Posicion)
                            .addComponent(txfPosicion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FContratacion)
                    .addComponent(txfFechaC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscar)
                    .addComponent(btnAgregar)
                    .addComponent(btnEditar)
                    .addComponent(btnEliminar))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1066, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String empleadoIDStr = txfEmpleadoID.getText().trim();

        if (empleadoIDStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID de empleado para buscar.");
            return;
        }

        try (Connection conn = ConexionOracle.getConnection()) {
            // Llamar al procedimiento almacenado desde el paquete
            String sql = "{call pkg_empleados.LeerEmpleado(?, ?, ?, ?, ?, ?, ?)}";
            CallableStatement cstmt = conn.prepareCall(sql);
            cstmt.setInt(1, Integer.parseInt(empleadoIDStr));

            // Registrar los parámetros de salida
            cstmt.registerOutParameter(2, OracleTypes.VARCHAR);  // p_Nombre
            cstmt.registerOutParameter(3, OracleTypes.VARCHAR);  // p_Telefono
            cstmt.registerOutParameter(4, OracleTypes.VARCHAR);  // p_Email
            cstmt.registerOutParameter(5, OracleTypes.VARCHAR);  // p_Posicion
            cstmt.registerOutParameter(6, OracleTypes.DATE);     // p_FechaContratacion
            cstmt.registerOutParameter(7, OracleTypes.NUMBER);   // p_Salario

            cstmt.execute(); // Ejecución del procedimiento

            modeloTabla.setRowCount(0); // Limpiar la tabla antes de agregar nuevos resultados

            String nombre = cstmt.getString(2);
            String telefono = cstmt.getString(3);
            String email = cstmt.getString(4);
            String posicion = cstmt.getString(5);
            Date fechaContratacion = cstmt.getDate(6);
            double salario = cstmt.getDouble(7);

            if (nombre != null) {  // Verificar si el empleado fue encontrado
                modeloTabla.addRow(new Object[]{Integer.parseInt(empleadoIDStr), nombre, telefono, email, posicion, fechaContratacion, salario});
            } else {
                JOptionPane.showMessageDialog(this, "Empleado no encontrado.");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al buscar empleado: " + e.getMessage());
        }
        limpiarCampos();

    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        try (Connection conn = ConexionOracle.getConnection()) {
            // Definir el procedimiento almacenado a llamar
            String sql = "{call crear_empleado(?, ?, ?, ?, ?, ?)}";

            // Preparar el CallableStatement
            CallableStatement cstmt = conn.prepareCall(sql);

            cstmt.setString(1, txfNombre.getText());
            cstmt.setString(2, txfTelefono.getText());
            cstmt.setString(3, txfEmail.getText());
            cstmt.setString(4, txfPosicion.getText());

            // Convertir la fecha al formato adecuado
            java.sql.Date fechaContratacion = java.sql.Date.valueOf(txfFechaC.getText()); // Asegúrate de que el formato sea yyyy-mm-dd
            cstmt.setDate(5, fechaContratacion);

            // Convertir el salario a tipo Double
            double salario = Double.parseDouble(txfSalario.getText());
            cstmt.setDouble(6, salario);

            // Ejecutar el procedimiento almacenado
            cstmt.executeUpdate();

            // Mostrar mensaje de éxito
            JOptionPane.showMessageDialog(this, "Empleado agregado exitosamente.");

            // Actualizar la tabla o interfaz de usuario
            limpiarCampos();
            actualizarTabla();
        } catch (SQLException e) {
            // Manejo de errores
            JOptionPane.showMessageDialog(this, "Error al agregar empleado: " + e.getMessage());
        } catch (NumberFormatException e) {
            // Manejo de errores para números y formato de fecha
            JOptionPane.showMessageDialog(this, "Error en el formato de datos: " + e.getMessage());
        } catch (IllegalArgumentException e) {
            // Manejo de errores para fechas
            JOptionPane.showMessageDialog(this, "Error en el formato de fecha: " + e.getMessage());
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        try (Connection conn = ConexionOracle.getConnection()) {
            String sql = "{call actualizar_empleado(?,?,?,?,?,?,?)}";
            CallableStatement cstmt = conn.prepareCall(sql);

            // Obtener valores del formulario y establecer en el procedimiento
            cstmt.setInt(1, Integer.parseInt(txfEmpleadoID.getText()));
            cstmt.setString(2, txfNombre.getText());
            cstmt.setString(3, txfTelefono.getText());
            cstmt.setString(4, txfEmail.getText());
            cstmt.setString(5, txfPosicion.getText());
            cstmt.setDate(6, java.sql.Date.valueOf(txfFechaC.getText())); // formato  yyyy-mm-dd
            cstmt.setDouble(7, Double.parseDouble(txfSalario.getText()));

            // Ejecutar la actualización
            cstmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Empleado actualizado exitosamente.");
            limpiarCampos();
            actualizarTabla();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al actualizar empleado: " + e.getMessage());
        }

    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        try (Connection conn = ConexionOracle.getConnection()) {
            String sql = "{call eliminar_empleado(?)}";
            CallableStatement cstmt = conn.prepareCall(sql);

            // Establecer el parámetro del procedimiento
            cstmt.setInt(1, Integer.parseInt(txfEmpleadoID.getText()));

            // Ejecutar la eliminación
            cstmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Empleado eliminado exitosamente.");
            limpiarCampos();
            actualizarTabla();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar empleado: " + e.getMessage());
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void txfEmpleadoIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfEmpleadoIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfEmpleadoIDActionPerformed

    private void txfFechaCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfFechaCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfFechaCActionPerformed

    private void txfSalarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfSalarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfSalarioActionPerformed

    private void txfTelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfTelefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfTelefonoActionPerformed

    private void txfPosicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfPosicionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfPosicionActionPerformed

    private void txfEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfEmailActionPerformed

    private void txfNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfNombreActionPerformed

    private void btnObtenerEmpleadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObtenerEmpleadosActionPerformed
        try (Connection conn = ConexionOracle.getConnection()) {
            String sql = "{call ObtenerEmpleados(?)}";
            CallableStatement cstmt = conn.prepareCall(sql);

            // Registramos el parámetro de salida como un REF CURSOR
            cstmt.registerOutParameter(1, OracleTypes.CURSOR);

            // Ejecutamos el procedimiento
            cstmt.execute();

            // Obtenemos el REF CURSOR y lo convertimos en un ResultSet
            ResultSet rs = (ResultSet) cstmt.getObject(1);

            // Limpiamos la tabla antes de cargar los datos
            DefaultTableModel model = (DefaultTableModel) TableEmpleados.getModel();
            model.setRowCount(0);

            // Iteramos sobre el ResultSet para poblar la tabla
            while (rs.next()) {
                Object[] fila = {
                    rs.getInt("EmpleadoID"),
                    rs.getString("Nombre"),
                    rs.getString("Telefono"),
                    rs.getString("Email"),
                    rs.getString("Posicion"),
                    rs.getDate("FechaContratacion"),
                    rs.getDouble("Salario")
                };
                model.addRow(fila);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al obtener empleados: " + e.getMessage());
        }
    }//GEN-LAST:event_btnObtenerEmpleadosActionPerformed

    private void btnObtenerEmpleadosPorPosicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObtenerEmpleadosPorPosicionActionPerformed
        String posicion = JOptionPane.showInputDialog(this, "Ingrese la posición de los empleados:");

        if (posicion != null && !posicion.isEmpty()) {
            Connection con = null;
            CallableStatement stmt = null;
            ResultSet rs = null;

            try {
                con = ConexionOracle.getConnection();
                String sql = "{call ObtenerEmpleadosPorPosicion(?, ?)}";
                stmt = con.prepareCall(sql);
                stmt.setString(1, posicion);
                stmt.registerOutParameter(2, OracleTypes.CURSOR);

                stmt.execute();

                rs = (ResultSet) stmt.getObject(2);

                // Obtener datos del ResultSet y llenar la JTable
                DefaultTableModel model = (DefaultTableModel) TableEmpleados.getModel();
                model.setRowCount(0);  // Limpiar tabla antes de agregar nuevos datos

                while (rs.next()) {
                    int empleadoID = rs.getInt("EmpleadoID");
                    String nombre = rs.getString("Nombre");
                    String telefono = rs.getString("Telefono");
                    String email = rs.getString("Email");
                    String posicionEmpleado = rs.getString("Posicion");
                    Date fechaContratacion = rs.getDate("FechaContratacion");
                    double salario = rs.getDouble("Salario");

                    model.addRow(new Object[]{empleadoID, nombre, telefono, email, posicionEmpleado, fechaContratacion, salario});
                }

                // Ordenar la tabla por la columna Posicion alfabéticamente
                TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
                TableEmpleados.setRowSorter(sorter);
                List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>();  // Especifica explícitamente el tipo
                sortKeys.add(new RowSorter.SortKey(4, SortOrder.ASCENDING));  // Columna 4 es 'Posicion'
                sorter.setSortKeys(sortKeys);
                sorter.sort();

            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al obtener empleados: " + e.getMessage());
            } finally {
                try {
                    if (rs != null) {
                        rs.close();
                    }
                    if (stmt != null) {
                        stmt.close();
                    }
                    if (con != null) {
                        con.close();
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_btnObtenerEmpleadosPorPosicionActionPerformed

    private void btnObtenerEmpleadosPorSalarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObtenerEmpleadosPorSalarioActionPerformed
        String salarioMinimoStr = JOptionPane.showInputDialog(this, "Ingrese el salario mínimo:");

        if (salarioMinimoStr != null && !salarioMinimoStr.isEmpty()) {
            double salarioMinimo = Double.parseDouble(salarioMinimoStr);

            Connection con = null;
            CallableStatement stmt = null;
            ResultSet rs = null;

            try {
                con = ConexionOracle.getConnection();
                String sql = "{call ObtenerEmpleadosPorSalario(?, ?)}";
                stmt = con.prepareCall(sql);
                stmt.setDouble(1, salarioMinimo);
                stmt.registerOutParameter(2, OracleTypes.CURSOR);

                stmt.execute();

                rs = (ResultSet) stmt.getObject(2);

                // Obtener datos del ResultSet y llenar la JTable
                DefaultTableModel model = (DefaultTableModel) TableEmpleados.getModel();
                model.setRowCount(0);  // Limpiar tabla antes de agregar nuevos datos

                while (rs.next()) {
                    int empleadoID = rs.getInt("EmpleadoID");
                    String nombre = rs.getString("Nombre");
                    String telefono = rs.getString("Telefono");
                    String email = rs.getString("Email");
                    String posicion = rs.getString("Posicion");
                    Date fechaContratacion = rs.getDate("FechaContratacion");
                    double salario = rs.getDouble("Salario");

                    model.addRow(new Object[]{empleadoID, nombre, telefono, email, posicion, fechaContratacion, salario});
                }

                // Ordenar la tabla por la columna Salario de mayor a menor
                TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
                TableEmpleados.setRowSorter(sorter);
                List<RowSorter.SortKey> sortKeys = new ArrayList<>();
                sortKeys.add(new RowSorter.SortKey(6, SortOrder.DESCENDING));  // Columna 6 es 'Salario'
                sorter.setSortKeys(sortKeys);
                sorter.sort();

            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al obtener empleados: " + e.getMessage());
            } finally {
                try {
                    if (rs != null) {
                        rs.close();
                    }
                    if (stmt != null) {
                        stmt.close();
                    }
                    if (con != null) {
                        con.close();
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_btnObtenerEmpleadosPorSalarioActionPerformed

    /**
     * @param args the command line arguments
     */
    public void limpiarCampos() {
        txfNombre.setText("");
        txfEmpleadoID.setText("");
        txfTelefono.setText("");
        txfEmail.setText("");
        txfPosicion.setText("");
        txfSalario.setText("");
        txfFechaC.setText("");
    }

    private void actualizarTabla() {
        modeloTabla.setRowCount(0); // Limpiar la tabla

        try (Connection conn = ConexionOracle.getConnection()) {
            String sql = "{call ObtenerEmpleados(?)}";
            CallableStatement cstmt = conn.prepareCall(sql);

            // Registrar el parámetro de salida como un REF CURSOR
            cstmt.registerOutParameter(1, OracleTypes.CURSOR);

            // Ejecutar el procedimiento
            cstmt.execute();

            // Obtener el REF CURSOR y convertirlo en un ResultSet
            ResultSet rs = (ResultSet) cstmt.getObject(1);

            // Iterar sobre el ResultSet para poblar la tabla
            while (rs.next()) {
                int empleadoID = rs.getInt("EmpleadoID");
                String nombre = rs.getString("Nombre");
                String telefono = rs.getString("Telefono");
                String email = rs.getString("Email");
                String posicion = rs.getString("Posicion");
                Date fechaContratacion = rs.getDate("FechaContratacion");
                double salario = rs.getDouble("Salario");

                modeloTabla.addRow(new Object[]{empleadoID, nombre, telefono, email, posicion, fechaContratacion, salario});
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar datos: " + e.getMessage());
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmpleadosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmpleadosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmpleadosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmpleadosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmpleadosFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Email;
    private javax.swing.JLabel EmpleadoID;
    private javax.swing.JLabel FContratacion;
    private javax.swing.JLabel Nombre;
    private javax.swing.JLabel Posicion;
    private javax.swing.JLabel Salario;
    private javax.swing.JTable TableEmpleados;
    private javax.swing.JLabel Telefono;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnObtenerEmpleados;
    private javax.swing.JButton btnObtenerEmpleadosPorPosicion;
    private javax.swing.JButton btnObtenerEmpleadosPorSalario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField txfEmail;
    private javax.swing.JTextField txfEmpleadoID;
    private javax.swing.JTextField txfFechaC;
    private javax.swing.JTextField txfNombre;
    private javax.swing.JTextField txfPosicion;
    private javax.swing.JTextField txfSalario;
    private javax.swing.JTextField txfTelefono;
    // End of variables declaration//GEN-END:variables
}
